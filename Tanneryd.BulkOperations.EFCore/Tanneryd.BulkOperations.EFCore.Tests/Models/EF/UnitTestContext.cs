// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Data.SqlTypes;

namespace Tanneryd.BulkOperations.EFCore.Tests
{
    public class UnitTestContext : DbContext
    {
        public UnitTestContext()
        {
        }

        public UnitTestContext(DbContextOptions<UnitTestContext> options)
            : base(options)
        {
        }

        public DbSet<BatchInvoice> BatchInvoices { get; set; } // BatchInvoice
        public DbSet<BatchInvoiceItem> BatchInvoiceItems { get; set; } // BatchInvoiceItem
        public DbSet<Blog> Blogs { get; set; } // Blog
        public DbSet<CoachTeamsWithDbGeneratedGuid> CoachTeamsWithDbGeneratedGuids { get; set; } // CoachTeamsWithDbGeneratedGuid
        public DbSet<CoachTeamsWithUserGeneratedGuid> CoachTeamsWithUserGeneratedGuids { get; set; } // CoachTeamsWithUserGeneratedGuid
        public DbSet<CoachWithDbGeneratedGuid> CoachWithDbGeneratedGuids { get; set; } // CoachWithDbGeneratedGuid
        public DbSet<CoachWithUserGeneratedGuid> CoachWithUserGeneratedGuids { get; set; } // CoachWithUserGeneratedGuid
        public DbSet<Company> Companies { get; set; } // Company
        public DbSet<Composite> Composites { get; set; } // Composite
        public DbSet<CompositePrime> CompositePrimes { get; set; } // CompositePrime
        public DbSet<Coordinate> Coordinates { get; set; } // Coordinate
        public DbSet<Course> Courses { get; set; } // Course
        public DbSet<CourseInstructor> CourseInstructors { get; set; } // CourseInstructor
        public DbSet<Department> Departments { get; set; } // Department
        public DbSet<Employee> Employees { get; set; } // Employee
        public DbSet<EmptyTable> EmptyTables { get; set; } // EmptyTable
        public DbSet<Instructor> Instructors { get; set; } // Instructor
        public DbSet<Invoice> Invoices { get; set; } // Invoice
        public DbSet<InvoiceItem> InvoiceItems { get; set; } // InvoiceItem
        public DbSet<Journal> Journals { get; set; } // Journal
        public DbSet<Keyword> Keywords { get; set; } // Keyword
        public DbSet<LogItem> LogItems { get; set; } // LogItem
        public DbSet<Number> Numbers { get; set; } // Number
        public DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        public DbSet<Parity> Parities { get; set; } // Parity
        public DbSet<Contact> Contacts { get; set; } // Contact
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PlayerWithDbGeneratedGuid> PlayerWithDbGeneratedGuids { get; set; } // PlayerWithDbGeneratedGuid
        public DbSet<PlayerWithUserGeneratedGuid> PlayerWithUserGeneratedGuids { get; set; } // PlayerWithUserGeneratedGuid
        public DbSet<Point> Points { get; set; } // Point
        public DbSet<Post> Posts { get; set; } // Post
        public DbSet<Price> Prices { get; set; } // Price
        public DbSet<Prime> Primes { get; set; } // Prime
        public DbSet<ReservedSqlKeyword> ReservedSqlKeywords { get; set; } // ReservedSqlKeyword
        public DbSet<SummaryReportFromTableAsExtent> SummaryReportFromTableAsExtents { get; set; } // SummaryReportFROMTableASExtent
        public DbSet<TeamWithDbGeneratedGuid> TeamWithDbGeneratedGuids { get; set; } // TeamWithDbGeneratedGuid
        public DbSet<TeamWithUserGeneratedGuid> TeamWithUserGeneratedGuids { get; set; } // TeamWithUserGeneratedGuid
        public DbSet<Visitor> Visitors { get; set; } // Visitor
        public DbSet<VisitorPost> VisitorPosts { get; set; } // VisitorPosts

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"data source=(localdb)\MSSQLLocalDB;initial catalog=Tanneryd.BulkOperations.EFCore.Tests.Models.EF.UnitTestContext;persist security info=True;Integrated Security=SSPI;MultipleActiveResultSets=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new BatchInvoiceConfiguration());
            modelBuilder.ApplyConfiguration(new BatchInvoiceItemConfiguration());
            modelBuilder.ApplyConfiguration(new BlogConfiguration());
            modelBuilder.ApplyConfiguration(new CoachTeamsWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CoachTeamsWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CoachWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CoachWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CompanyConfiguration());
            modelBuilder.ApplyConfiguration(new CompositeConfiguration());
            modelBuilder.ApplyConfiguration(new CompositePrimeConfiguration());
            modelBuilder.ApplyConfiguration(new CoordinateConfiguration());
            modelBuilder.ApplyConfiguration(new CourseConfiguration());
            modelBuilder.ApplyConfiguration(new CourseInstructorConfiguration());
            modelBuilder.ApplyConfiguration(new DepartmentConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new EmptyTableConfiguration());
            modelBuilder.ApplyConfiguration(new InstructorConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceItemConfiguration());
            modelBuilder.ApplyConfiguration(new JournalConfiguration());
            modelBuilder.ApplyConfiguration(new KeywordConfiguration());
            modelBuilder.ApplyConfiguration(new LogItemConfiguration());
            modelBuilder.ApplyConfiguration(new NumberConfiguration());
            modelBuilder.ApplyConfiguration(new OfficeAssignmentConfiguration());
            modelBuilder.ApplyConfiguration(new ParityConfiguration());
            modelBuilder.ApplyConfiguration(new ContactConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new PlayerWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new PlayerWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new PointConfiguration());
            modelBuilder.ApplyConfiguration(new PostConfiguration());
            modelBuilder.ApplyConfiguration(new PriceConfiguration());
            modelBuilder.ApplyConfiguration(new PrimeConfiguration());
            modelBuilder.ApplyConfiguration(new ReservedSqlKeywordConfiguration());
            modelBuilder.ApplyConfiguration(new SummaryReportFromTableAsExtentConfiguration());
            modelBuilder.ApplyConfiguration(new TeamWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new TeamWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new VisitorConfiguration());
            modelBuilder.ApplyConfiguration(new VisitorPostConfiguration());
        }

    }
}
// </auto-generated>
