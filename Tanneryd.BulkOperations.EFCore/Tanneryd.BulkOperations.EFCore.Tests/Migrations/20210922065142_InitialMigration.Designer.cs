// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tanneryd.BulkOperations.EFCore.Tests;

namespace Tanneryd.BulkOperations.EFCore.Tests.Migrations
{
    [DbContext(typeof(UnitTestContext))]
    [Migration("20210922065142_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PostVisitor", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisitorsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostsId", "VisitorsId");

                    b.HasIndex("VisitorsId");

                    b.ToTable("PostVisitor");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.BatchInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PrimaryKey");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BatchInvoice")
                        .IsClustered();

                    b.ToTable("BatchInvoice", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.BatchInvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PrimaryKey");

                    b.Property<Guid>("BatchInvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BatchInvoiceId");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InvoiceId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BatchInvoiceItem")
                        .IsClustered();

                    b.HasIndex("BatchInvoiceId")
                        .HasDatabaseName("IX_BatchInvoiceId");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_InvoiceId");

                    b.ToTable("BatchInvoiceItem", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Blog")
                        .IsClustered();

                    b.ToTable("Blog", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachTeamsWithDbGeneratedGuid", b =>
                {
                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CoachId");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamId");

                    b.HasKey("CoachId", "TeamId")
                        .HasName("PK_dbo.CoachTeamsWithDbGeneratedGuid")
                        .IsClustered();

                    b.HasIndex("CoachId")
                        .HasDatabaseName("IX_CoachId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_TeamId");

                    b.ToTable("CoachTeamsWithDbGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachTeamsWithUserGeneratedGuid", b =>
                {
                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CoachId");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamId");

                    b.HasKey("CoachId", "TeamId")
                        .HasName("PK_dbo.CoachTeamsWithUserGeneratedGuid")
                        .IsClustered();

                    b.HasIndex("CoachId")
                        .HasDatabaseName("IX_CoachId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_TeamId");

                    b.ToTable("CoachTeamsWithUserGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachWithDbGeneratedGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Lastname");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CoachWithDbGeneratedGuid")
                        .IsClustered();

                    b.ToTable("CoachWithDbGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachWithUserGeneratedGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Lastname");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CoachWithUserGeneratedGuid")
                        .IsClustered();

                    b.ToTable("CoachWithUserGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<long>("ParentCompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("ParentCompanyId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Company")
                        .IsClustered();

                    b.HasIndex("ParentCompanyId")
                        .HasDatabaseName("IX_ParentCompanyId");

                    b.ToTable("Company", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Composite", b =>
                {
                    b.Property<long>("NumberId")
                        .HasColumnType("bigint")
                        .HasColumnName("NumberId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("NumberId")
                        .HasName("PK_dbo.Composite")
                        .IsClustered();

                    b.HasIndex("NumberId")
                        .HasDatabaseName("IX_NumberId");

                    b.ToTable("Composite", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CompositePrime", b =>
                {
                    b.Property<long>("CompositeId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompositeId");

                    b.Property<long>("PrimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("PrimeId");

                    b.HasKey("CompositeId", "PrimeId")
                        .HasName("PK_dbo.CompositePrime")
                        .IsClustered();

                    b.HasIndex("CompositeId")
                        .HasDatabaseName("IX_CompositeId");

                    b.HasIndex("PrimeId")
                        .HasDatabaseName("IX_PrimeId");

                    b.ToTable("CompositePrime", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Contact", b =>
                {
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.ToView("Contact", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("Value");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Coordinate")
                        .IsClustered();

                    b.ToTable("Coordinate", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Credits")
                        .HasColumnType("int")
                        .HasColumnName("Credits");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("CourseId")
                        .HasName("PK_dbo.Course")
                        .IsClustered();

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("IX_DepartmentID");

                    b.ToTable("Course", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.HasKey("CourseId", "InstructorId")
                        .HasName("PK_dbo.CourseInstructor")
                        .IsClustered();

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_CourseID");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("IX_InstructorID");

                    b.ToTable("CourseInstructor", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Administrator")
                        .HasColumnType("int")
                        .HasColumnName("Administrator");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Budget");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("DepartmentId")
                        .HasName("PK_dbo.Department")
                        .IsClustered();

                    b.ToTable("Department", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Employee")
                        .IsClustered();

                    b.HasIndex("EmployerId")
                        .HasDatabaseName("IX_EmployerId");

                    b.ToTable("Employee", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.EmptyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id")
                        .HasName("PK_dbo.EmptyTable")
                        .IsClustered();

                    b.ToTable("EmptyTable", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstructorID")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("HireDate");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.HasKey("InstructorId")
                        .HasName("PK_dbo.Instructor")
                        .IsClustered();

                    b.ToTable("Instructor", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PrimaryKey");

                    b.Property<decimal>("Gross")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Gross");

                    b.Property<decimal>("Net")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Net");

                    b.Property<decimal>("Tax")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("Tax");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Invoice")
                        .IsClustered();

                    b.ToTable("Invoice", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.InvoiceItem", b =>
                {
                    b.Property<int>("PrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrimaryKey")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InvoiceId");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JournalId");

                    b.HasKey("PrimaryKey")
                        .HasName("PK_dbo.InvoiceItem")
                        .IsClustered();

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_InvoiceId");

                    b.HasIndex("JournalId")
                        .HasDatabaseName("IX_JournalId");

                    b.ToTable("InvoiceItem", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Journal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PrimaryKey");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Journal")
                        .IsClustered();

                    b.ToTable("Journal", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Keyword")
                        .IsClustered();

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_PostId");

                    b.ToTable("Keyword", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LogType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("LogType");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Recommendation");

                    b.Property<int?>("Severity")
                        .HasColumnType("int")
                        .HasColumnName("Severity");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("Timestamp");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LogItem")
                        .IsClustered();

                    b.ToTable("LogItem", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Number", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompositeId")
                        .HasColumnType("int")
                        .HasColumnName("CompositeId");

                    b.Property<int>("ParityId")
                        .HasColumnType("int")
                        .HasColumnName("ParityId");

                    b.Property<int?>("PrimeId")
                        .HasColumnType("int")
                        .HasColumnName("PrimeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("Value");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Number")
                        .IsClustered();

                    b.HasIndex("ParityId")
                        .HasDatabaseName("IX_ParityId");

                    b.ToTable("Number", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Timestamp");

                    b.HasKey("InstructorId")
                        .HasName("PK_dbo.OfficeAssignment")
                        .IsClustered();

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("IX_InstructorID");

                    b.ToTable("OfficeAssignment", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Parity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Key")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Parity")
                        .IsClustered();

                    b.ToTable("Parity", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BirthDate");

                    b.Property<int?>("EmployeeNumber")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeNumber");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<long?>("MotherId")
                        .HasColumnType("bigint")
                        .HasColumnName("MotherId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Person")
                        .IsClustered();

                    b.HasIndex("MotherId")
                        .HasDatabaseName("IX_MotherId");

                    b.ToTable("Person", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.PlayerWithDbGeneratedGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Lastname");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PlayerWithDbGeneratedGuid")
                        .IsClustered();

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_TeamId");

                    b.ToTable("PlayerWithDbGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.PlayerWithUserGeneratedGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Lastname");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PlayerWithUserGeneratedGuid")
                        .IsClustered();

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_TeamId");

                    b.ToTable("PlayerWithUserGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Point", b =>
                {
                    b.Property<int>("XCoordinateId")
                        .HasColumnType("int")
                        .HasColumnName("XCoordinateId");

                    b.Property<int>("YCoordinateId")
                        .HasColumnType("int")
                        .HasColumnName("YCoordinateId");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("Value");

                    b.HasKey("XCoordinateId", "YCoordinateId")
                        .HasName("PK_dbo.Point")
                        .IsClustered();

                    b.HasIndex("XCoordinateId")
                        .HasDatabaseName("IX_XCoordinateId");

                    b.HasIndex("YCoordinateId")
                        .HasDatabaseName("IX_YCoordinateId");

                    b.ToTable("Point", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlogId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Post")
                        .IsClustered();

                    b.HasIndex("BlogId")
                        .HasDatabaseName("IX_BlogId");

                    b.ToTable("Post", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Value");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Price")
                        .IsClustered();

                    b.ToTable("Price", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Prime", b =>
                {
                    b.Property<long>("NumberId")
                        .HasColumnType("bigint")
                        .HasColumnName("NumberId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("NumberId")
                        .HasName("PK_dbo.Prime")
                        .IsClustered();

                    b.HasIndex("NumberId")
                        .HasDatabaseName("IX_NumberId");

                    b.ToTable("Prime", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.ReservedSqlKeyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("Identity");

                    b.Property<int?>("Key")
                        .HasColumnType("int")
                        .HasColumnName("Key");

                    b.Property<string>("Select")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Select");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ReservedSqlKeyword")
                        .IsClustered();

                    b.ToTable("ReservedSqlKeyword", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.SummaryReportFromTableAsExtent", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportID")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<string>("Entry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Entry");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("PeriodID");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Volume");

                    b.HasKey("ReportId")
                        .HasName("PK_dbo.SummaryReportFROMTableASExtent")
                        .IsClustered();

                    b.HasIndex("PeriodId")
                        .HasDatabaseName("IX_PeriodID");

                    b.ToTable("SummaryReportFROMTableASExtent", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.TeamWithDbGeneratedGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TeamWithDbGeneratedGuid")
                        .IsClustered();

                    b.ToTable("TeamWithDbGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.TeamWithUserGeneratedGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TeamWithUserGeneratedGuid")
                        .IsClustered();

                    b.ToTable("TeamWithUserGeneratedGuid", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Visitor")
                        .IsClustered();

                    b.ToTable("Visitor", "dbo");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.VisitorPost", b =>
                {
                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VisitorId");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.HasKey("VisitorId", "PostId")
                        .HasName("PK_dbo.VisitorPosts")
                        .IsClustered();

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_PostId");

                    b.HasIndex("VisitorId")
                        .HasDatabaseName("IX_VisitorId");

                    b.ToTable("VisitorPosts", "dbo");
                });

            modelBuilder.Entity("PostVisitor", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Visitor", null)
                        .WithMany()
                        .HasForeignKey("VisitorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.BatchInvoiceItem", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.BatchInvoice", "BatchInvoice")
                        .WithMany("Invoices")
                        .HasForeignKey("BatchInvoiceId")
                        .HasConstraintName("FK_dbo.BatchInvoiceItem_dbo.BatchInvoice_BatchInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Invoice", "Invoice")
                        .WithMany("BatchInvoices")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_dbo.BatchInvoiceItem_dbo.Invoice_InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchInvoice");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachTeamsWithDbGeneratedGuid", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.CoachWithDbGeneratedGuid", "CoachWithDbGeneratedGuid")
                        .WithMany("CoachTeamsWithDbGeneratedGuids")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_dbo.CoachTeamsWithDbGeneratedGuid_dbo.CoachWithDbGeneratedGuid_CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.TeamWithDbGeneratedGuid", "TeamWithDbGeneratedGuid")
                        .WithMany("CoachTeamsWithDbGeneratedGuids")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.CoachTeamsWithDbGeneratedGuid_dbo.TeamWithDbGeneratedGuid_TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachWithDbGeneratedGuid");

                    b.Navigation("TeamWithDbGeneratedGuid");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachTeamsWithUserGeneratedGuid", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.CoachWithUserGeneratedGuid", "CoachWithUserGeneratedGuid")
                        .WithMany("CoachTeamsWithUserGeneratedGuids")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_dbo.CoachTeamsWithUserGeneratedGuid_dbo.CoachWithUserGeneratedGuid_CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.TeamWithUserGeneratedGuid", "TeamWithUserGeneratedGuid")
                        .WithMany("CoachTeamsWithUserGeneratedGuids")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.CoachTeamsWithUserGeneratedGuid_dbo.TeamWithUserGeneratedGuid_TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachWithUserGeneratedGuid");

                    b.Navigation("TeamWithUserGeneratedGuid");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Company", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Company", "ParentCompany")
                        .WithMany("Companies")
                        .HasForeignKey("ParentCompanyId")
                        .HasConstraintName("FK_dbo.Company_dbo.Company_ParentCompanyId")
                        .IsRequired();

                    b.Navigation("ParentCompany");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Composite", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Number", "Number")
                        .WithOne("Composite")
                        .HasForeignKey("Tanneryd.BulkOperations.EFCore.Tests.Composite", "NumberId")
                        .HasConstraintName("FK_dbo.Composite_dbo.Number_NumberId")
                        .IsRequired();

                    b.Navigation("Number");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CompositePrime", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Composite", "Composite")
                        .WithMany("CompositePrimes")
                        .HasForeignKey("CompositeId")
                        .HasConstraintName("FK_dbo.CompositePrime_dbo.Composite_CompositeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Prime", "Prime")
                        .WithMany("CompositePrimes")
                        .HasForeignKey("PrimeId")
                        .HasConstraintName("FK_dbo.CompositePrime_dbo.Prime_PrimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composite");

                    b.Navigation("Prime");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Course", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_dbo.Course_dbo.Department_DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CourseInstructor", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_dbo.CourseInstructor_dbo.Course_CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_dbo.CourseInstructor_dbo.Instructor_InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Employee", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("EmployerId")
                        .HasConstraintName("FK_dbo.Employee_dbo.Company_EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.InvoiceItem", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Invoice", "Invoice")
                        .WithMany("Journals")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_dbo.InvoiceItem_dbo.Invoice_InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Journal", "Journal")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("JournalId")
                        .HasConstraintName("FK_dbo.InvoiceItem_dbo.Journal_JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Keyword", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Post", "Post")
                        .WithMany("Keywords")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.Keyword_dbo.Post_PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Number", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Parity", "Parity")
                        .WithMany("Numbers")
                        .HasForeignKey("ParityId")
                        .HasConstraintName("FK_dbo.Number_dbo.Parity_ParityId")
                        .IsRequired();

                    b.Navigation("Parity");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.OfficeAssignment", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Instructor", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("Tanneryd.BulkOperations.EFCore.Tests.OfficeAssignment", "InstructorId")
                        .HasConstraintName("FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID")
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Person", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Person", "Mother")
                        .WithMany("People")
                        .HasForeignKey("MotherId")
                        .HasConstraintName("FK_dbo.Person_dbo.Person_MotherId");

                    b.Navigation("Mother");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.PlayerWithDbGeneratedGuid", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.TeamWithDbGeneratedGuid", "TeamWithDbGeneratedGuid")
                        .WithMany("PlayerWithDbGeneratedGuids")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.PlayerWithDbGeneratedGuid_dbo.TeamWithDbGeneratedGuid_TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamWithDbGeneratedGuid");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.PlayerWithUserGeneratedGuid", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.TeamWithUserGeneratedGuid", "TeamWithUserGeneratedGuid")
                        .WithMany("PlayerWithUserGeneratedGuids")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.PlayerWithUserGeneratedGuid_dbo.TeamWithUserGeneratedGuid_TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamWithUserGeneratedGuid");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Point", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Coordinate", "XCoordinate")
                        .WithMany("Points_XCoordinateId")
                        .HasForeignKey("XCoordinateId")
                        .HasConstraintName("FK_dbo.Point_dbo.Coordinate_XCoordinateId")
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Coordinate", "YCoordinate")
                        .WithMany("Points_YCoordinateId")
                        .HasForeignKey("YCoordinateId")
                        .HasConstraintName("FK_dbo.Point_dbo.Coordinate_YCoordinateId")
                        .IsRequired();

                    b.Navigation("XCoordinate");

                    b.Navigation("YCoordinate");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Post", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("FK_dbo.Post_dbo.Blog_BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Prime", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Number", "Number")
                        .WithOne("Prime")
                        .HasForeignKey("Tanneryd.BulkOperations.EFCore.Tests.Prime", "NumberId")
                        .HasConstraintName("FK_dbo.Prime_dbo.Number_NumberId")
                        .IsRequired();

                    b.Navigation("Number");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.VisitorPost", b =>
                {
                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Post", "Post")
                        .WithMany("VisitorPosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.VisitorPosts_dbo.Post_PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tanneryd.BulkOperations.EFCore.Tests.Visitor", "Visitor")
                        .WithMany("VisitorPosts")
                        .HasForeignKey("VisitorId")
                        .HasConstraintName("FK_dbo.VisitorPosts_dbo.Visitor_VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.BatchInvoice", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachWithDbGeneratedGuid", b =>
                {
                    b.Navigation("CoachTeamsWithDbGeneratedGuids");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.CoachWithUserGeneratedGuid", b =>
                {
                    b.Navigation("CoachTeamsWithUserGeneratedGuids");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Company", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Composite", b =>
                {
                    b.Navigation("CompositePrimes");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Coordinate", b =>
                {
                    b.Navigation("Points_XCoordinateId");

                    b.Navigation("Points_YCoordinateId");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Course", b =>
                {
                    b.Navigation("CourseInstructors");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Instructor", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("OfficeAssignment");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Invoice", b =>
                {
                    b.Navigation("BatchInvoices");

                    b.Navigation("Journals");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Journal", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Number", b =>
                {
                    b.Navigation("Composite");

                    b.Navigation("Prime");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Parity", b =>
                {
                    b.Navigation("Numbers");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Person", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Post", b =>
                {
                    b.Navigation("Keywords");

                    b.Navigation("VisitorPosts");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Prime", b =>
                {
                    b.Navigation("CompositePrimes");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.TeamWithDbGeneratedGuid", b =>
                {
                    b.Navigation("CoachTeamsWithDbGeneratedGuids");

                    b.Navigation("PlayerWithDbGeneratedGuids");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.TeamWithUserGeneratedGuid", b =>
                {
                    b.Navigation("CoachTeamsWithUserGeneratedGuids");

                    b.Navigation("PlayerWithUserGeneratedGuids");
                });

            modelBuilder.Entity("Tanneryd.BulkOperations.EFCore.Tests.Visitor", b =>
                {
                    b.Navigation("VisitorPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
